{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","file":"umd_module.js","sourcesContent":["export class Harmony {\n    constructor (...args) {\n        for (let [i, injectee] of this.constructor.$inject.entries()) {\n            this[injectee] = args[i];\n        }\n    }\n    iterate (o) {\n        return (function* (_o) {\n            for (let [i, key] of Object.getOwnPropertyNames(_o).entries()) {\n                yield [key, _o[key]];\n            }\n        })(o);\n    }\n    static iterate (o) {\n        return (function* (_o) {\n            for (let [i, key] of Object.getOwnPropertyNames(_o).entries()) {\n                yield [key, _o[key]];\n            }\n        })(o);\n    }\n    static get $inject () {\n        return this._$inject || [];\n    }\n    static set $inject (injectees) {\n        let _injectees = [];\n        if (!Array.isArray(injectees)) {\n            injectees = [injectees];\n        }\n        for (let [i, injecteeStr] of injectees.entries()) {\n            let truthy = true;\n            for (let [j, _injecteeStr] of this.$inject.entries()) {\n                if (injecteeStr === _injecteeStr) {\n                    truthy = false;\n                }\n            }\n            if (truthy) {\n                _injectees.push(injecteeStr);\n            }\n        }\n        this._$inject = this.$inject.concat(_injectees);\n    }\n    static set $register (descriptor) {\n        for (let [module, klass] of Harmony.iterate(descriptor)) {\n            angular.module(module)[klass.type](klass.name, this);\n        }\n    }\n    static mixin (...mixins) {\n        for (let [i, mixin] of mixins.entries()) {\n            for (let [k, v] of Harmony.iterate(mixin)) {\n                let p = this.prototype;\n                while (p[k] !== undefined && p[k] !== null) {\n                    p = p.prototype;\n                }\n                Object.defineProperty(p, k, {\n                    value: v,\n                    enumerable: true\n                });\n            }\n        }\n    }\n    toString () {\n        return this.name || super.toString().match(/function\\s*(.*?)\\(/)[1];\n    }\n}\nexport class Controller extends Harmony {\n    constructor (...args) {\n        super(...args);\n        for (let [key, fn] of this.iterate(this.constructor.prototype)) {\n            if (typeof fn === \"function\" &&\n                key[0] === \"$\") {\n                this.$scope[key.slice(1)] = this.$scope[key] = (...args) => {\n                    return fn.apply(this, args);\n                };\n            }\n        }\n    }\n    static set $register(descriptor) {\n        for (let [module, klass] of Harmony.iterate(descriptor)) {\n            angular.module(module).controller(klass.name, this);\n        };\n    }\n    digest () {\n        try { this.$scope.$digest(); }\n        catch (ngEx) { \"noop\"; }\n    }\n}\nController.$inject = \"$scope\";\nexport class Service extends Harmony {\n    static set $register(descriptor) {\n        for (let [module, klass] of Harmony.iterate(descriptor)) {\n            angular.module(module)[klass.type || \"service\"](klass.name, this);\n        }\n    }\n}\nService.$inject = \"$http\";"]}